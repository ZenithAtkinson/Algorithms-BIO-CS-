{
    "tests": [
        {
            "score": 0,
            "max_score": 10,
            "name": "test_tsp.py::test_branch_and_bound_smart",
            "output": "\n@max_score(10)\n    def test_branch_and_bound_smart():\n        \"\"\"\n        Your Smart B&B algorithm should find a better answer\n        than your B&B algorithm in the same amount of time.\n        \"\"\"\n    \n        locations, edges = generate_network(\n            30,\n            euclidean=True,\n            reduction=0.2,\n            normal=False,\n            seed=312,\n        )\n    \n        timer = Timer(20)\n        bnb_stats = branch_and_bound(edges, timer)\n>       assert_valid_tours(edges, bnb_stats)\n\ntest_tsp.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_tsp.py:33: in assert_valid_tours\n    assert_valid_tour(edges, stat.tour)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nedges = [[0.0, 0.8, 0.564, 0.219, 0.318, 0.595, ...], [0.8, 0.0, 0.94, 0.717, 1.08, 0.3, ...], [0.564, inf, 0.0, 0.377, inf, i...377, 0.0, inf, 0.456, ...], [0.318, inf, 0.497, 0.374, 0.0, 0.83, ...], [0.595, 0.3, 0.64, 0.456, 0.83, 0.0, ...], ...]\ntour = []\n\n    def assert_valid_tour(edges, tour):\n        \"\"\"\n        Length is number of vertices\n        Not vertices repeated\n        Non-infinite score\n        \"\"\"\n>       assert len(tour) == len(edges)\nE       assert 0 == 30\nE        +  where 0 = len([])\nE        +  and   30 = len([[0.0, 0.8, 0.564, 0.219, 0.318, 0.595, ...], [0.8, 0.0, 0.94, 0.717, 1.08, 0.3, ...], [0.564, inf, 0.0, 0.377, inf, i...377, 0.0, inf, 0.456, ...], [0.318, inf, 0.497, 0.374, 0.0, 0.83, ...], [0.595, 0.3, 0.64, 0.456, 0.83, 0.0, ...], ...])\n\ntest_tsp.py:26: AssertionError",
            "visibility": "visible"
        }
    ]
}